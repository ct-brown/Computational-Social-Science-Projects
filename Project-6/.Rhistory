att[[i]] <- dt.att[2,1]
# Proportion of balanced covariates
prop_balance_covar[[i]] <- summary(model_ps) %>%
pluck("sum.matched") %>%
as.data.frame() %>%
rownames_to_column(var = "variables") %>%
rename(prop_balance_covar = "Std. Pair Dist.") %>%
select(variables, prop_balance_covar) %>%
summarize(prop_balance_covar = sum(prop_balance_covar > .9 & prop_balance_covar < 1.1) / length(prop_balance_covar))
# Mean percent balance improvement
mean_balance_improvement[[i]] <- summary(model_ps) %>%
pluck("sum.all") %>%
as.data.frame() %>%
rownames_to_column(var = "variables") %>%
rename(mean_diff = "Std. Mean Diff.") %>%
select(variables, mean_diff) %>%
summarize(mean_balance_improvement = mean(mean_diff, na.rm = T))
}
# Remove post-treatment covariates
dt.pre <- dt[,-c(1, 123:180)]
dt.pre <- dt.pre[complete.cases(dt.pre),]
# Randomly select features
# num <- sample(1:120, 1)
# var <- sample(names, num, replace = F)
# Simulate random selection of features 10k+ times
models <- vector("list", 10000)
att <- vector("list", 10000)
prop_balance_covar <- vector("list", 10000)
mean_balance_improvement <- vector("list", 10000)
for (i in 1:10000) {
names <- names(dt.pre[,c(2:121)])
num <- sample(1:120, 1)
var <- sample(x = names, size = num, replace = F)
formula <- as.formula(paste(paste("college ~ student_Gen +", paste(var, collapse = " + "))))
# Fit p-score models and save ATTs, proportion of balanced covariates, and mean percent balance improvement
model_ps <- matchit(formula = formula,
data = dt.pre,
method = "genetic",
distance = "mahalanobis",
replace = FALSE,
estimand = "ATT")
models[[i]] <- model_ps
dt.md <- match.data(model_ps)
names <- names(model_ps$X)
dt.md <- dt.md %>%
select(college, names, weights, subclass)
# ATT
glm <- glm(formula,
family = binomial(link = "logit"),
data = dt.md,
weights = weights)
dt.att <- as.data.frame(glm$coefficients)
att[[i]] <- dt.att[2,1]
# Proportion of balanced covariates
prop_balance_covar[[i]] <- summary(model_ps) %>%
pluck("sum.matched") %>%
as.data.frame() %>%
rownames_to_column(var = "variables") %>%
rename(prop_balance_covar = "Std. Pair Dist.") %>%
select(variables, prop_balance_covar) %>%
summarize(prop_balance_covar = sum(prop_balance_covar > .9 & prop_balance_covar < 1.1) / length(prop_balance_covar))
# Mean percent balance improvement
mean_balance_improvement[[i]] <- summary(model_ps) %>%
pluck("sum.all") %>%
as.data.frame() %>%
rownames_to_column(var = "variables") %>%
rename(mean_diff = "Std. Mean Diff.") %>%
select(variables, mean_diff) %>%
summarize(mean_balance_improvement = mean(mean_diff, na.rm = T))
}
dt.pre <- dt[,-c(1, 123:180)]
dt.pre <- dt.pre[complete.cases(dt.pre),]
models <- vector("list", 10000)
att <- vector("list", 10000)
prop_balance_covar <- vector("list", 10000)
mean_balance_improvement <- vector("list", 10000)
names <- names(dt.pre[,c(2:121)])
num <- sample(1:120, 1)
var <- sample(x = names, size = num, replace = F)
formula <- as.formula(paste(paste("college ~ student_Gen +", paste(var, collapse = " + "))))
# Fit p-score models and save ATTs, proportion of balanced covariates, and mean percent balance improvement
model_ps <- matchit(formula = formula,
data = dt.pre,
method = "genetic",
distance = "mahalanobis",
replace = FALSE,
estimand = "ATT")
# Fit p-score models and save ATTs, proportion of balanced covariates, and mean percent balance improvement
model_ps <- matchit(formula = formula,
data = dt.pre,
method = "optimal",
distance = "mahalanobis",
replace = FALSE,
estimand = "ATT")
models[[i]] <- model_ps
dt.md <- match.data(model_ps)
names <- names(model_ps$X)
dt.md <- dt.md %>%
select(college, names, weights, subclass)
# ATT
glm <- glm(formula,
family = binomial(link = "logit"),
data = dt.md,
weights = weights)
att[[i]] <- dt.att[2,1]
dt.att
dt.att <- as.data.frame(glm$coefficients)
att[[i]] <- dt.att[2,1]
# Proportion of balanced covariates
prop_balance_covar[[i]] <- summary(model_ps) %>%
pluck("sum.matched") %>%
as.data.frame() %>%
rownames_to_column(var = "variables") %>%
rename(prop_balance_covar = "Std. Pair Dist.") %>%
select(variables, prop_balance_covar) %>%
summarize(prop_balance_covar = sum(prop_balance_covar > .9 & prop_balance_covar < 1.1) / length(prop_balance_covar))
# Mean percent balance improvement
mean_balance_improvement[[i]] <- summary(model_ps) %>%
pluck("sum.all") %>%
as.data.frame() %>%
rownames_to_column(var = "variables") %>%
rename(mean_diff = "Std. Mean Diff.") %>%
select(variables, mean_diff) %>%
summarize(mean_balance_improvement = mean(mean_diff, na.rm = T))
# Remove post-treatment covariates
dt.pre <- dt[,-c(1, 123:180)]
dt.pre <- dt.pre[complete.cases(dt.pre),]
# Randomly select features
# num <- sample(1:120, 1)
# var <- sample(names, num, replace = F)
# Simulate random selection of features 10k+ times
models <- vector("list", 10000)
att <- vector("list", 10000)
prop_balance_covar <- vector("list", 10000)
mean_balance_improvement <- vector("list", 10000)
for (i in 1:10000) {
names <- names(dt.pre[,c(2:121)])
num <- sample(1:120, 1)
var <- sample(x = names, size = num, replace = F)
formula <- as.formula(paste(paste("college ~ student_Gen +", paste(var, collapse = " + "))))
# Fit p-score models and save ATTs, proportion of balanced covariates, and mean percent balance improvement
model_ps <- matchit(formula = formula,
data = dt.pre,
method = "optimal",
distance = "mahalanobis",
replace = FALSE,
estimand = "ATT")
models[[i]] <- model_ps
dt.md <- match.data(model_ps)
names <- names(model_ps$X)
dt.md <- dt.md %>%
select(college, names, weights, subclass)
# ATT
glm <- glm(formula,
family = binomial(link = "logit"),
data = dt.md,
weights = weights)
dt.att <- as.data.frame(glm$coefficients)
att[[i]] <- dt.att[2,1]
# Proportion of balanced covariates
prop_balance_covar[[i]] <- summary(model_ps) %>%
pluck("sum.matched") %>%
as.data.frame() %>%
rownames_to_column(var = "variables") %>%
rename(prop_balance_covar = "Std. Pair Dist.") %>%
select(variables, prop_balance_covar) %>%
summarize(prop_balance_covar = sum(prop_balance_covar > .9 & prop_balance_covar < 1.1) / length(prop_balance_covar))
# Mean percent balance improvement
mean_balance_improvement[[i]] <- summary(model_ps) %>%
pluck("sum.all") %>%
as.data.frame() %>%
rownames_to_column(var = "variables") %>%
rename(mean_diff = "Std. Mean Diff.") %>%
select(variables, mean_diff) %>%
summarize(mean_balance_improvement = mean(mean_diff, na.rm = T))
}
# Plot ATT v. proportion
att <- unlist(att)
prop_balance_covar <- unlist(prop_balance_covar)
dt.plot <- data.frame(att, prop_balance_covar)
plot <- ggplot(data = dt.plot,
aes(x = att,
y = prop_balance_covar)) +
geom_point() +
labs(title = "ATT v. Proportion",
x = "ATT",
y = "Proportion of Balanced Covariates")
plot
# 10 random covariate balance plots (hint try gridExtra)
# Note: ggplot objects are finnicky so ask for help if you're struggling to automatically create them; consider using functions!
plots <- list()
names <- list()
for (i in 1:10) {
mod <- sample(models, 1, replace = F)
name <- names(mod[[1]]$model$coefficients)
name <- name[-1]
names[[i]] <- name
dt.model_ps <- match.data(mod[[1]])
dt.model_ps <- dt.model_ps %>%
select(name)
love <- love.plot(x = dt.model_ps,
treat = dt.model_ps$student_Gen,
pscore = dt.model_ps$distance,
thresholds = .1,
stars = "std",
show.legend = F,
title = NULL,
themes = theme(legend.position = "none",
axis.title.x = element_blank(),
axis.text.y = element_blank()))
plots[[i]] <- love
}
mod <- sample(models, 1, replace = F)
plots <- list()
names <- list()
View(mod)
name <- names(mod[[1]]$model$coefficients)
name
name <- names(mod[[1]]$X)
name
names[[i]] <- name
dt.model_ps <- match.data(mod[[1]])
dt.model_ps <- dt.model_ps %>%
select(name)
love <- love.plot(x = dt.model_ps,
treat = dt.model_ps$student_Gen,
pscore = dt.model_ps$distance,
thresholds = .1,
stars = "std",
show.legend = F,
title = NULL,
themes = theme(legend.position = "none",
axis.title.x = element_blank(),
axis.text.y = element_blank()))
colnames(dt.model_ps)
dt.model_ps <- match.data(mod[[1]])
colnames(dt.model_ps)
dt.model_ps <- dt.model_ps %>%
select(college, name, weights, subclass)
love <- love.plot(x = dt.model_ps,
treat = dt.model_ps$student_Gen,
pscore = dt.model_ps$weights,
thresholds = .1,
stars = "std",
show.legend = F,
title = NULL,
themes = theme(legend.position = "none",
axis.title.x = element_blank(),
axis.text.y = element_blank()))
love
plots <- list()
names <- list()
for (i in 1:10) {
mod <- sample(models, 1, replace = F)
name <- names(mod[[1]]$X)
names[[i]] <- name
dt.model_ps <- match.data(mod[[1]])
dt.model_ps <- dt.model_ps %>%
select(college, name, weights, subclass)
love <- love.plot(x = dt.model_ps,
treat = dt.model_ps$student_Gen,
pscore = dt.model_ps$weights,
thresholds = .1,
stars = "std",
show.legend = F,
title = NULL,
themes = theme(legend.position = "none",
axis.title.x = element_blank(),
axis.text.y = element_blank()))
plots[[i]] <- love
}
love.grid <- grid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]], plots[[6]], plots[[7]], plots[[8]], plots[[9]], plots[[10]],
nrow = 5)
plot(love.grid)
plot(love.grid)
plot
abline(v = dt.model_ps_bal,
col = "blue")
hist(prop_balance_covar,
breaks = 100)
abline(v = dt.model_ps_bal,
col = "blue")
abline(v = 0.3333333,
col = "blue")
hist(prop_balance_covar,
breaks = 100)
abline(v = 0.3333333,
col = "blue")
print(sum(prop_balance_covar > 0.3333333) / 10000)
prop_balance_covar
sum(prop_balance_covar > 0.3333333)
sum(prop_balance_covar > .001)
mean(prop_balance_covar)
View(names)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
x < a
dta.sanction.d <- read_excel("~/Library/CloudStorage/Box-Box/Administrative_Data/Cal-OAR Data/Data/Cal-OAR Dashboard Raw Data.xlsx",
sheet = "Sanction Rate",
col_types = c("text", "text", "date", "text", "text", "text", "text", "text"),
na = c("."),
skip = 1)
xfun::pkg_attach2(c("dplyr",
"readxl")
xfun::pkg_attach2(c("dplyr",
"readxl"))
dta.sanction.d <- read_excel("~/Library/CloudStorage/Box-Box/Administrative_Data/Cal-OAR Data/Data/Cal-OAR Dashboard Raw Data.xlsx",
sheet = "Sanction Rate",
col_types = c("text", "text", "date", "text", "text", "text", "text", "text"),
na = c("."),
skip = 1)
View(dta.sanction.d)
load("/Users/Taylor_1/Library/CloudStorage/Box-Box/Research/Current Projects/New Politics of Climate Change - From a Regulatory State to a Welfare State/data/raw/df.RData")
load("/Users/Taylor_1/Library/CloudStorage/Box-Box/Research/Current Projects/New Politics of Climate Change - From a Regulatory State to a Welfare State/data/clean/df.RData")
View(df)
knitr::opts_chunk$set(echo = TRUE)
options(sci=999)
cpd <- read.csv("/Users/Taylor_1/Library/CloudStorage/Box-Box/Research/Current Projects/New Politics of Climate Change - From a Regulatory State to a Welfare State/data/raw/climate_policy_database_policies_export.csv")
cpd <- cpd %>% select(-c(policy_id, country_iso, country_update, policy_name, policy_title, jurisdiction, supranational_region, subnational_region, policy_city_or_local, policy_description, stringency, high_impact, reference, last_update, impact_indicators.comments, impact_indicators.name, impact_indicators.value, impact_indicators.base_year, impact_indicators.target_year))
cpd <- cpd %>%
mutate(
sector_agricultureForestry = case_when(
grepl("Agriculture and forestry", cpd$sector) == 0 ~ 0,
grepl("Agriculture and forestry", cpd$sector) == 1 ~ 1
),
sector_air = case_when(
grepl("Air", cpd$sector) == 0 ~ 0,
grepl("Air", cpd$sector) == 1 ~ 1
),
sector_appliances = case_when(
grepl("Appliances", cpd$sector) == 0 ~ 0,
grepl("Appliances", cpd$sector) == 1 ~ 1
),
sector_buildings = case_when(
grepl("Buildings", cpd$sector) == 0 ~ 0,
grepl("Buildings", cpd$sector) == 1 ~ 1
),
sector_coal = case_when(
grepl("Coal", cpd$sector) == 0 ~ 0,
grepl("Coal", cpd$sector) == 1 ~ 1
),
sector_construction = case_when(
grepl("Construction", cpd$sector) == 0 ~ 0,
grepl("Construction", cpd$sector) == 1 ~ 1
),
sector_css = case_when(
grepl("CCS", cpd$sector) == 0 ~ 0,
grepl("CCS", cpd$sector) == 1 ~ 1
),
sector_electricityHeat = case_when(
grepl("Electricity and heat", cpd$sector) == 0 ~ 0,
grepl("Electricity and heat", cpd$sector) == 1 ~ 1
),
sector_fluorinatedGases = case_when(
grepl("Fluorinated gases", cpd$sector) == 0 ~ 0,
grepl("Fluorinated gases", cpd$sector) == 1 ~ 1
),
sector_forestry = case_when(
grepl("Forestry", cpd$sector) == 0 ~ 0,
grepl("Forestry", cpd$sector) == 1 ~ 1
),
sector_gas = case_when(
grepl("Gas", cpd$sector) == 0 ~ 0,
grepl("Gas", cpd$sector) == 1 ~ 1
),
sector_general = case_when(
grepl("General", cpd$sector) == 0 ~ 0,
grepl("General", cpd$sector) == 1 ~ 1
),
sector_heatingCooling = case_when(
grepl("Heating and cooling", cpd$sector) == 0 ~ 0,
grepl("Heating and cooling", cpd$sector) == 1 ~ 1
),
sector_heavyDutyVehicles = case_when(
grepl("Heavy-duty vehicles", cpd$sector) == 0 ~ 0,
grepl("Heavy-duty vehicles", cpd$sector) == 1 ~ 1
),
sector_hotWaterCooking = case_when(
grepl("Hot water and cooking", cpd$sector) == 0 ~ 0,
grepl("Hot water and cooking", cpd$sector) == 1 ~ 1
),
sector_industrialProcessCO2 = case_when(
grepl("Industrial process CO2", cpd$sector) == 0 ~ 0,
grepl("Industrial process CO2", cpd$sector) == 1 ~ 1
),
sector_industrialEnergyRelated = case_when(
grepl("Industrial energy related", cpd$sector) == 0 ~ 0,
grepl("Industrial energy related", cpd$sector) == 1 ~ 1
),
sector_industry = case_when(
grepl("Industry", cpd$sector) == 0 ~ 0,
grepl("Industry", cpd$sector) == 1 ~ 1
),
sector_lightDutyVehicles = case_when(
grepl("Light-duty vehicles", cpd$sector) == 0 ~ 0,
grepl("Light-duty vehicles", cpd$sector) == 1 ~ 1
),
sector_lowEmissionsMobility = case_when(
grepl("Low-emissions mobility", cpd$sector) == 0 ~ 0,
grepl("Low-emissions mobility", cpd$sector) == 1 ~ 1
),
sector_nuclear = case_when(
grepl("Nuclear", cpd$sector) == 0 ~ 0,
grepl("Nuclear", cpd$sector) == 1 ~ 1
),
sector_oil = case_when(
grepl("Oil", cpd$sector) == 0 ~ 0,
grepl("Oil", cpd$sector) == 1 ~ 1
),
sector_rail = case_when(
grepl("Rail", cpd$sector) == 0 ~ 0,
grepl("Rail", cpd$sector) == 1 ~ 1
),
sector_renewables = case_when(
grepl("Renewables", cpd$sector) == 0 ~ 0,
grepl("Renewables", cpd$sector) == 1 ~ 1
),
sector_transport = case_when(
grepl("Transport", cpd$sector) == 0 ~ 0,
grepl("Transport", cpd$sector) == 1 ~ 1
),
sector_wasteCh4 = case_when(
grepl("Waste CH4", cpd$sector) == 0 ~ 0,
grepl("Waste CH4", cpd$sector) == 1 ~ 1
)
) %>%
select(-sector)
cpd <- cpd %>%
mutate(
policyType_energyEfficiency = case_when(
grepl("Energy efficiency", cpd$policy_type) == 0 ~ 0,
grepl("Energy efficiency", cpd$policy_type) == 1 ~ 1
),
policyType_energyServiceDemandReductionResourceEfficiency = case_when(
grepl("Energy service demand reduction and resource efficiency", cpd$policy_type) == 0 ~ 0,
grepl("Energy service demand reduction and resource efficiency", cpd$policy_type) == 1 ~ 1
),
policyType_nonEnergyUse = case_when(
grepl("Non-energy use", cpd$policy_type) == 0 ~ 0,
grepl("Non-energy use", cpd$policy_type) == 1 ~ 1
),
policyType_otherLowCarbonTechnologiesFuelSwitch = case_when(
grepl("Other low-carbon technologies and fuel switch", cpd$policy_type) == 0 ~ 0,
grepl("Other low-carbon technologies and fuel switch", cpd$policy_type) == 1 ~ 1
),
policyType_Renewables = case_when(
grepl("Renewables", cpd$policy_type) == 0 ~ 0,
grepl("Renewables", cpd$policy_type) == 1 ~ 1
),
policyType_unknown = case_when(
grepl("Unknown", cpd$policy_type) == 0 ~ 0,
grepl("Unknown", cpd$policy_type) == 1 ~ 1
)
) %>%
select(-policy_type)
cpd <- cpd %>%
mutate(
policyObjective_adaptation = case_when(
grepl("Adaptation", cpd$policy_objective) == 0 ~ 0,
grepl("Adaptation", cpd$policy_objective) == 1 ~ 1
),
policyObjective_airPollution = case_when(
grepl("Air pollution", cpd$policy_objective) == 0 ~ 0,
grepl("Air pollution", cpd$policy_objective) == 1 ~ 1
),
policyObjective_economicDevelopment = case_when(
grepl("Economic development", cpd$policy_objective) == 0 ~ 0,
grepl("Economic development", cpd$policy_objective) == 1 ~ 1
),
policyObjective_energyAccess = case_when(
grepl("Energy access", cpd$policy_objective) == 0 ~ 0,
grepl("Energy access", cpd$policy_objective) == 1 ~ 1
),
policyObjective_energySecurity = case_when(
grepl("Energy security", cpd$policy_objective) == 0 ~ 0,
grepl("Energy security", cpd$policy_objective) == 1 ~ 1
),
policyObjective_foodSecurity = case_when(
grepl("Food security", cpd$policy_objective) == 0 ~ 0,
grepl("Food security", cpd$policy_objective) == 1 ~ 1
),
policyObjective_landUse = case_when(
grepl("Land use", cpd$policy_objective) == 0 ~ 0,
grepl("Land use", cpd$policy_objective) == 1 ~ 1
),
policyObjective_mitigation = case_when(
grepl("Mitigation", cpd$policy_objective) == 0 ~ 0,
grepl("Mitigation", cpd$policy_objective) == 1 ~ 1
),
policyObjective_water = case_when(
grepl("Water", cpd$policy_objective) == 0 ~ 0,
grepl("Water", cpd$policy_objective) == 1 ~ 1
)
) %>%
select(-policy_objective)
cpd <- cpd %>%
mutate(policyStatus = case_when(
policy_status == "Draft" ~ 0,
policy_status == "Ended" ~ 0,
policy_status == "In force" ~ 1,
policy_status == "Planned" ~ 0,
policy_status == "Superseded" ~ 0,
policy_status == "Under review" ~ 0,
policy_status == "Unknown" ~ NA,
)) %>%
select(-policy_status)
cpd <- cpd %>%
rename(year = decision_date)
View(cpd)
rm(dta.sanction.d)
colnames(cpd)
colnames(df)
rm(cpd, df)
